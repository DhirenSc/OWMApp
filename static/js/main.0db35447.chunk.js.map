{"version":3,"sources":["serviceWorker.js","Header/script/header.js","CitySelection/script/citySelector.js","WeatherCard/script/weatherCard.js","index.js"],"names":["Boolean","window","location","hostname","match","SiteHeader","props","Jumbotron","className","CitySelector","changeCity","event","setCity","target","value","style","marginTop","Row","Col","sm","onChange","this","defaultValue","disabled","cityList","map","city","key","React","Component","WeatherCard","initialDay","data","length","moment","date","filteredResults","filter","item","hour","textAlign","index","Card","bg","text","animation","animations","fadeIn","border","Body","Title","popIn","utc","tz","format","src","weather","icon","alt","Subtitle","description","toLowerCase","split","s","charAt","toUpperCase","substring","join","faThermometerHalf","size","fontSize","main","temp","faTemperatureHigh","temp_max","faTemperatureLow","temp_min","faWind","humidity","faWater","sea_level","App","state","dataFromCitySelector","setState","getWeather","cities","fetch","then","response","json","list","catch","error","console","log","id","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0db35447.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/*Script for display header*/\r\n\r\nimport React from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { Jumbotron } from \"react-bootstrap\";\r\nimport \"./../css/header.css\";\r\n\r\n// Stateless component for site header\r\nconst SiteHeader = props => {\r\n  return (\r\n    <Jumbotron className=\"headerDiv\">\r\n      <h1>Weather App</h1>\r\n    </Jumbotron>\r\n  );\r\n};\r\n\r\nexport default SiteHeader;\r\n","/*Script for setting up the tweet button in the social section*/\r\nimport React from \"react\";\r\nimport \"./../css/citySelector.css\";\r\nimport { Row, Col } from \"react-bootstrap\";\r\n\r\n\r\nclass CitySelector extends React.Component {\r\n  // Function called on city change\r\n  changeCity = event => {\r\n    this.props.setCity(event.target.value);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\" style={{marginTop: \"10px\"}}>\r\n        {/* Centering the select box with Row, Col from react bootstrap */}\r\n        <Row>\r\n          <Col sm={4}></Col>\r\n          <Col sm={4}>\r\n            <div className=\"select\">\r\n              <select onChange={this.changeCity} defaultValue={\"DEFAULT\"}>\r\n                <option disabled={true} value=\"DEFAULT\">\r\n                  Choose a City\r\n                </option>\r\n                {/* Rendering the select box through the city list */}\r\n                {this.props.cityList.map(city => (\r\n                  <option key={city} value={city}>\r\n                    {city}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n          </Col>\r\n          <Col sm={4}></Col>\r\n        </Row>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CitySelector;\r\n","/*Script for setting up a multiple weather card*/\r\nimport React from \"react\";\r\nimport \"./../css/weatherContainer.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { Card, Row, Col } from \"react-bootstrap\";\r\nimport moment from \"moment-timezone\";\r\nimport { animations } from \"react-animation\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faThermometerHalf,\r\n  faTemperatureLow,\r\n  faTemperatureHigh,\r\n  faWind,\r\n  faWater\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst WeatherCard = props => {\r\n\r\n  // Initialising day of the response\r\n  let initialDay;\r\n\r\n  // If response contains data then set the initial date\r\n  if (props.data.length) {\r\n    initialDay = moment(props.data[0][\"dt_txt\"]).date();\r\n  }\r\n\r\n  /* \r\n  Filtering the response list to convert 40 Data points to\r\n  5 unique data points for different days. Also, data point\r\n  selected is at 12:00 PM\r\n  */\r\n  let filteredResults = props.data.filter(item => {\r\n    let dayOfMonth = moment(item[\"dt_txt\"]).date();\r\n    if (dayOfMonth === initialDay) {\r\n      if (\r\n        moment(item[\"dt_txt\"]).hour() > 11 &&\r\n        moment(item[\"dt_txt\"]).hour() < 13\r\n      ) {\r\n        return item;\r\n      }\r\n    } else {\r\n      initialDay = moment(item[\"dt_txt\"]).date();\r\n    }\r\n    return null;\r\n  });\r\n\r\n  return (\r\n    <div className=\"container\" style={{ marginTop: \"10px\", textAlign: \"center\" }}>\r\n      <h2>{props.city}</h2>\r\n      {/* Displaying different parameters of each datapoint from filtered response */}\r\n      {filteredResults.map((item, index) => (\r\n        <Card\r\n          bg=\"info\"\r\n          text=\"#4AA9BF\"\r\n          key={index}\r\n          style={{ animation: animations.fadeIn }}\r\n          className=\"cardContainer\"\r\n          border=\"danger\"\r\n        >\r\n          <Card.Body style={{ textAlign: \"center\" }}>\r\n            <Row>\r\n              <Col sm={3}>\r\n                {/* Converting the utc time from response data to\r\n                    New York time\r\n                */}\r\n                <Card.Title style={{ animation: animations.popIn }}>\r\n                  {moment\r\n                    .utc(item[\"dt_txt\"])\r\n                    .tz(\"America/New_York\")\r\n                    .format(\"dddd\")}\r\n                  <br />\r\n                  {moment\r\n                    .utc(item[\"dt_txt\"])\r\n                    .tz(\"America/New_York\")\r\n                    .format(\"ll\")}\r\n                </Card.Title>\r\n                {/* Weather icon from openweathermap */}\r\n                <img\r\n                  src={\r\n                    \"http://openweathermap.org/img/wn/\" +\r\n                    item.weather[0].icon +\r\n                    \"@2x.png\"\r\n                  } alt=\"\"\r\n                ></img>\r\n                {/* Converting first letter of each word to uppercase */}\r\n                <Card.Subtitle style={{ animation: animations.popIn }}>\r\n                  {\r\n                    (item.weather[0].description = item.weather[0].description\r\n                      .toLowerCase()\r\n                      .split(\" \")\r\n                      .map(s => s.charAt(0).toUpperCase() + s.substring(1))\r\n                      .join(\" \"))\r\n                  }\r\n                </Card.Subtitle>\r\n              </Col>\r\n              <Col sm={3}>\r\n                <Card.Title>\r\n                  <FontAwesomeIcon icon={faThermometerHalf} size=\"5x\" />\r\n                </Card.Title>\r\n                <br />\r\n                <Card.Subtitle style={{ fontSize: \"26px\", animation: animations.popIn }}>\r\n                  {item.main.temp}&deg;F\r\n                </Card.Subtitle>\r\n              </Col>\r\n\r\n              <Col sm={3}>\r\n                <br />\r\n                <Card.Subtitle style={{ animation: animations.popIn }}>\r\n                  <FontAwesomeIcon icon={faTemperatureHigh} size=\"3x\" />\r\n                  <br />\r\n                  Max. Temperature: {item.main.temp_max}&deg;F\r\n                </Card.Subtitle>\r\n                <br />\r\n                <Card.Subtitle style={{ animation: animations.popIn }}>\r\n                  <FontAwesomeIcon icon={faTemperatureLow} size=\"3x\" />\r\n                  <br />\r\n                  Min. Temperature: {item.main.temp_min}&deg;F\r\n                </Card.Subtitle>\r\n                <br />\r\n              </Col>\r\n\r\n              <Col sm={3}>\r\n                <br />\r\n                <Card.Subtitle style={{ animation: animations.popIn }}>\r\n                  <FontAwesomeIcon icon={faWind} size=\"3x\" />\r\n                  <br />\r\n                  Humidity: {item.main.humidity} %\r\n                </Card.Subtitle>\r\n                <br />\r\n                <Card.Subtitle style={{ animation: animations.popIn }}>\r\n                  <FontAwesomeIcon icon={faWater} size=\"3x\" />\r\n                  <br />\r\n                  Sea-Level: {item.main.sea_level} m\r\n                </Card.Subtitle>\r\n                <br />\r\n              </Col>\r\n            </Row>\r\n          </Card.Body>\r\n        </Card>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WeatherCard;\r\n","/* Main file from which the app runs */\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport SiteHeader from \"./Header/script/header.js\";\nimport CitySelector from \"./CitySelection/script/citySelector\";\nimport WeatherCard from \"./WeatherCard/script/weatherCard\";\n\n// API Key for the Openweathermap\nconst API_KEY = \"56a1d7bdc7372b46016714949dcd74de\";\n\n// Base app component\nclass App extends React.Component {\n\n  // Maintaining city and response array as states of app component\n  state = {\n    city: \"\",\n    data: []\n  };\n\n  // Callback for city selector to set city on change in select box\n  setCity = dataFromCitySelector => {\n    this.setState({ city: dataFromCitySelector });\n    this.getWeather(dataFromCitySelector);\n  };\n\n  // List of cities\n  cities = [\"Henrietta\", \"Cleveland\", \"Buffalo\", \"Boston\", \"Philadelphia\"];\n\n  //getWeather is a method we'll use to make the api call\n  getWeather(city) {\n    fetch(\n      \"https://api.openweathermap.org/data/2.5/forecast?q=\" +\n        city +\n        \",us&appid=\" +\n        API_KEY +\n        \"&units=imperial\"\n    )\n      .then(response => response.json())\n      .then(response => {\n        // Checking if response is OK\n        if(response['cod'] === \"200\"){\n          // Setting data from the response\n          this.setState({ data: response.list });\n        }\n        else{\n          // Error response\n          this.setState({ city: \"Unable to fetch the weather data. Please try again later.\" });\n        }\n      })\n      .catch(function(error) {\n        console.log(error);\n      });\n  }\n\n  render() {\n    return (\n      // Main body of the application\n      <div id=\"mainBody\">\n        {/* Website Header */}\n        <SiteHeader />\n        {/* City selector select box */}\n        <CitySelector cityList={this.cities} setCity={this.setCity} />\n        {/* Weather data from response */}\n        <WeatherCard data={this.state.data} city={this.state.city} />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}